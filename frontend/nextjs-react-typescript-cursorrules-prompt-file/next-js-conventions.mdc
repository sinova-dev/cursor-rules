# Next.js Conventions and Best Practices

## File Structure and Naming

    - Follow Next.js App Router conventions:
        - layout.tsx: Must use default export
        - page.tsx: Must use default export
        - error.tsx: Must use default export
        - loading.tsx: Must use default export
        - not-found.tsx: Must use default export
        - template.tsx: Must use default export
        - route.ts: Must use default export

    - File naming conventions:
        - Component files: MUST use PascalCase (e.g., Button.tsx, UserProfile.tsx, AuthLayout.tsx)
        - Utility files (.ts): kebab-case
        - Config files: kebab-case
        - Test files: kebab-case.test.ts
        - Story files: camelCase.stories.tsx

    - Folder naming:
        - Follow Next.js app router case
        - Use kebab-case for feature folders
        - Group by feature/domain

## Server Components (RSC)

    - Use Server Components by default:
        - Keep client components minimal
        - Maximum JSX depth: 5 levels
        - Maximum props: 3
        - No relative imports

    - Client Component boundaries:
        - Mark with 'use client'
        - Keep interactive logic isolated
        - Handle client-side state locally
        - Follow proper event handling

    - Data fetching patterns:
        - Use Server Components for data fetching
        - Handle errors with error.tsx
        - Implement proper loading states
        - Use proper TypeScript types

    - Component composition:
        - Pass Server Components as children
        - Keep layouts as Server Components
        - Use dynamic imports for Client Components
        - Follow proper prop typing

## Performance Optimization

    - Core Web Vitals optimization:
        - Largest Contentful Paint (LCP)
        - First Input Delay (FID)
        - Cumulative Layout Shift (CLS)
        - Interaction to Next Paint (INP)

    - Image optimization:
        - Use Next.js Image component
        - Proper sizing and formats
        - Loading strategies
        - Proper alt text

    - Resource optimization:
        - Proper code splitting
        - Bundle optimization
        - Font loading
        - Asset preloading

    - Caching strategies:
        - Static data caching
        - Dynamic data handling
        - Revalidation patterns
        - Cache invalidation

## Routing and Navigation

    - App Router implementation:
        - Proper route segmentation
        - Dynamic route handling
        - Route groups usage
        - Parallel routes

    - Navigation patterns:
        - Type-safe navigation
        - Proper loading states
        - Error boundary usage
        - Proper TypeScript types

## Data Fetching

    - Server Component patterns:
        - Use { cache: 'force-cache' } for static
        - Use { cache: 'no-store' } for dynamic
        - Use { next: { revalidate: n } } for ISR
        - Proper error handling

    - Mutation patterns:
        - Use Server Actions
        - Proper validation
        - Error handling
        - Optimistic updates

    - Type safety:
        - Use Zod for validation
        - Proper TypeScript types
        - Error type definitions
        - Response type safety

## State Management

    - Server-side state:
        - Keep in Server Components
        - Proper type definitions
        - Error handling
        - Cache management

    - Client-side state:
        - Minimal client state
        - Proper React hooks
        - Type-safe context
        - Proper event handling

## Security

    - Authentication:
        - Proper auth patterns
        - Type-safe session
        - Error handling
        - Proper validation

    - Authorization:
        - Role-based access
        - Type-safe checks
        - Error handling
        - Proper validation

    - Input validation:
        - Use Zod schemas
        - Server-side validation
        - Type safety
        - Error handling

## SEO and Metadata

    - Metadata implementation:
        - Type-safe metadata
        - Dynamic generation
        - Proper validation
        - Error handling

    - SEO optimization:
        - Proper meta tags
        - Structured data
        - Type safety
        - Validation

## Development Tools and Practices

    - Code quality and style:
        - Use ESLint for code linting with strict rules
        - Use Prettier for consistent code formatting
        - Use single quotes for strings
        - Use template literals for string interpolation
        - Follow consistent spacing and indentation
        - Use early returns for guard clauses
        - Avoid unnecessary else statements
        - Use concise syntax for simple conditionals

    - Development workflow:
        - Use proper version control practices
        - Follow code review guidelines
        - Follow proper debugging practices
        - Use proper CI/CD tools

    - Testing:
        - Implement comprehensive testing
        - Component testing
        - Integration testing
        - Type testing
        - Error testing

    - Documentation:
        - Component documentation
        - Type documentation
        - API documentation
        - Error documentation
        - Maintain up-to-date docs

## TypeScript Configuration

    - Enable strict mode
    - Use proper type imports
    - Follow type safety rules
    - Implement proper validation
    - Use Zod for schema validation
    - Use type-safe patterns across:
        - Navigation
        - State management
        - API responses
        - Form handling
        - Authentication/Authorization

## Accessibility

    - WCAG compliance:
        - Proper ARIA usage
        - Keyboard navigation
        - Screen reader support
        - Color contrast

    - Implementation:
        - Semantic HTML
        - Focus management
        - Error messaging
        - Loading states
