# Next.js Conventions and Best Practices

## File Structure and Naming

    - Structure files:
        - Export default from layout.tsx
        - Export default from page.tsx
        - Export default from error.tsx
        - Export default from loading.tsx
        - Export default from not-found.tsx
        - Export default from template.tsx
        - Export default from route.ts

    - Name files:
        - Write components in PascalCase
        - Create utilities in kebab-case
        - Name configs in kebab-case
        - Format tests as kebab-case.test.ts
        - Write stories as camelCase.stories.tsx

    - Organize folders:
        - Follow app router case
        - Use kebab-case for features
        - Group by domain

## Server Components (RSC)

    - Build Server Components:
        - Use RSC by default
        - Minimize client code
        - Limit JSX to 5 levels
        - Restrict props to 3
        - Avoid relative imports

    - Create Client boundaries:
        - Add 'use client' directive
        - Isolate interactive logic
        - Manage client state locally
        - Handle events properly

    - Fetch data:
        - Use Server Components
        - Handle errors with error.tsx
        - Implement loading states
        - Type check responses

    - Compose components:
        - Pass RSC as children
        - Keep layouts server-side
        - Load clients dynamically
        - Type check props

## Performance Optimization

    - Optimize Core Vitals:
        - Improve LCP loading
        - Minimize FID delay
        - Reduce CLS shifts
        - Enhance INP response

    - Optimize images:
        - Use Next.js Image
        - Set proper sizes
        - Choose formats wisely
        - Add alt text

    - Optimize resources:
        - Split code effectively
        - Minimize bundles
        - Load fonts efficiently
        - Preload assets

    - Configure caching:
        - Cache static data
        - Handle dynamic data
        - Manage revalidation
        - Control invalidation

## Routing and Navigation

    - Implement routes:
        - Segment routes properly
        - Handle dynamic paths
        - Create route groups
        - Enable parallel routes

    - Build navigation:
        - Type check navigation
        - Show loading states
        - Handle errors
        - Type check paths

## Data Fetching

    - Configure caching:
        - Set force-cache for static
        - Use no-store for dynamic
        - Configure ISR timing
        - Handle errors properly

    - Process mutations:
        - Use Server Actions
        - Validate inputs
        - Handle errors
        - Update optimistically

    - Ensure type safety:
        - Validate with Zod
        - Type check responses
        - Define error types
        - Secure responses

## State Management

    - Manage server state:
        - Keep data server-side
        - Type check definitions
        - Handle errors
        - Control caching

    - Control client state:
        - Minimize state usage
        - Implement hooks properly
        - Type check context
        - Handle events

## Security

    - Secure authentication:
        - Implement auth patterns
        - Type check sessions
        - Handle errors
        - Validate inputs

    - Control authorization:
        - Check roles properly
        - Type check access
        - Handle errors
        - Validate permissions

    - Validate input:
        - Use Zod schemas
        - Verify server-side
        - Ensure type safety
        - Handle errors

## SEO and Metadata

    - Configure metadata:
        - Type check metadata
        - Generate dynamically
        - Validate content
        - Handle errors

    - Optimize SEO:
        - Add meta tags
        - Structure data
        - Ensure type safety
        - Validate content

## Accessibility

    - Implement WCAG:
        - Add ARIA attributes
        - Enable keyboard nav
        - Support screen readers
        - Check color contrast

    - Build features:
        - Use semantic HTML
        - Manage focus states
        - Display error messages
        - Show loading states

## Development Tools and Practices

    - Enforce code quality:
        - Configure ESLint with strict rules
        - Set up Prettier formatting
        - Use single quotes
        - Apply template literals
        - Maintain consistent spacing
        - Return early from functions
        - Remove unnecessary else
        - Write concise conditionals

    - Implement workflow:
        - Follow version control practices
        - Review code systematically
        - Debug code effectively
        - Set up CI/CD pipelines

    - Write tests:
        - Create component tests
        - Build integration tests
        - Test types thoroughly
        - Validate error handling

    - Document code:
        - Write component docs
        - Document types
        - Describe APIs
        - Explain error handling
        - Update docs regularly

## TypeScript Configuration

    - Configure TypeScript:
        - Enable strict mode
        - Import types properly
        - Follow safety rules
        - Validate inputs

    - Implement type safety:
        - Use Zod for validation
        - Type check navigation
        - Secure state management
        - Validate API responses
        - Type check forms
        - Verify auth flows
