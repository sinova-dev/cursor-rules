- TypeScript Usage:

  - Use TypeScript for all new code with strict mode enabled
  - Prefer interfaces over types for better extensibility
  - Use type inference when types are obvious
  - Avoid type assertions unless absolutely necessary
  - Use union types and discriminated unions for better type safety
  - Leverage generics for reusable type-safe code
  - Avoid using 'any' type unless explicitly required
  - Use proper type imports/exports

- Function Declarations:

  - Use "function" keyword for pure functions and components
  - Use arrow functions for callbacks and methods
  - Avoid unnecessary function wrapping
  - Use proper function parameter typing
  - Implement proper return type annotations
  - Use async/await for asynchronous code
  - Follow proper error handling patterns

- Code Style:

  - Omit semicolons (ASI - Automatic Semicolon Insertion)
  - Use single quotes for strings
  - Use template literals for string interpolation
  - Follow consistent spacing and indentation
  - Use proper line breaks for readability
  - Follow proper bracket style
  - Use proper commenting style

- File Structure:

  - Organize imports in logical groups
  - Place types and interfaces at the top
  - Export components as named exports
  - Follow component/function ordering:
    1. Main component export
    2. Subcomponents
    3. Helper functions
    4. Static content
    5. Types and interfaces

- Conditional Statements:

  - Use early returns for guard clauses
  - Avoid unnecessary else statements
  - Use ternary operators for simple conditions
  - Use switch statements for multiple conditions
  - Use proper null checking
  - Implement proper error boundaries
  - Use proper type guards

- Modern JavaScript Features:

  - Use optional chaining (?.) for nullable properties
  - Use nullish coalescing (??) for default values
  - Use array/object spread for immutable updates
  - Use destructuring for cleaner code
  - Use proper module imports/exports
  - Leverage modern array methods
  - Use proper async/await patterns

- Code Organization:

  - Keep files focused and manageable
  - Use proper module boundaries
  - Implement proper separation of concerns
  - Use proper dependency management
  - Follow consistent naming conventions
  - Use proper directory structure
  - Implement proper code splitting

- Performance Considerations:

  - Use proper memoization techniques
  - Implement proper lazy loading
  - Use proper bundle optimization
  - Follow proper tree-shaking practices
  - Use proper code splitting
  - Implement proper caching
  - Use proper performance monitoring

- Development Tools:
  - Use ESLint for code linting
  - Use Prettier for code formatting
  - Implement proper TypeScript configuration
  - Use proper debugging tools
  - Follow proper testing practices
  - Use proper documentation tools
  - Implement proper CI/CD practices
- File structure: Exported component, subcomponents, helpers, static content, types.
- Avoid unnecessary curly braces in conditional statements.
- For single-line statements in conditionals, omit curly braces.
- Use concise, one-line syntax for simple conditional statements (e.g., if (condition) doSomething()).
