# Server Actions Guidelines

## Code Organization

    - Directory structure:
        - Place in /app/actions/ directory for global actions
        - Use feature-specific locations for feature-scoped actions
        - Use kebab-case for files
        - Use descriptive names with feature prefixes
        - Example: user-management.action.ts

    - File organization:
        - Group imports logically:
          1. External dependencies
          2. Type imports
          3. Internal utilities
          4. Local types/interfaces
        - No relative imports
        - Maximum 3 parameters per action

## Implementation

    - Action definition:
        - Use 'use server' directive at file level
        - Export as named exports
        - Type-safe parameters with 'T' prefix
        - Use async/await for all async operations
        - Example:
          'use server'

          type TUpdateUserParams = {
            id: string;
            data: TUserData;
            options?: TUpdateOptions;
          };

          export const updateUser = async ({
            id,
            data,
            options = {},
          }: TUpdateUserParams) => {
            // implementation
          };

    - Function style:
        - Use arrow functions for consistency
        - Implement early returns for error cases
        - Use proper type guards for type narrowing
        - Use optional chaining and nullish coalescing
        - Keep functions pure and focused

## Type Safety and Error Handling

    - Type safety:
        - Use proper error type definitions
        - Type-safe parameters and responses
        - Type-safe forms with Zod
        - Type-safe server state
        - Use proper type guards

    - Error handling:
        - Implement error recovery strategies
        - Use structured error logging
        - Handle validation errors
        - Provide error reporting
        - Use error boundaries where appropriate

## Server Action Patterns

    - Form handling:
        - Use formAction prop
        - Type-safe forms with Zod
        - Server-side validation
        - Loading states with useFormStatus


    - Data mutations:
        - Optimistic updates
        - Cache revalidation
        - Error recovery
        - Type-safe responses


    - State management:
        - Use useFormState hook
        - Type-safe server state
        - Proper error states
        - Loading indicators

## Security

    - Input validation:
        - Zod validation
        - Type checking
        - Sanitization
        - Rate limiting


    - Authentication:
        - Type-safe session
        - Role checking
        - Permission validation
        - Error handling


    - Data safety:
        - SQL injection prevention
        - XSS prevention
        - CSRF protection
        - Input sanitization

## Performance

    - Caching:
        - Proper cache headers
        - Revalidation
        - Cache invalidation
        - Edge caching


    - Optimization:
        - Minimal client state
        - Proper loading states
        - Optimistic updates
        - Response streaming

## Testing

    - Unit tests:
        - Action testing
        - Type testing
        - Error testing
        - Integration tests


    - Test organization:
        - Test file naming: *.test.ts
        - Test structure
        - Mock data
        - Error cases

## Monitoring

    - Error tracking:
        - Structured logging
        - Error reporting
        - Performance monitoring
        - Usage analytics


    - Debugging:
        - Development tools
        - Error tracing
        - Performance profiling
        - Log analysis
