- Core Development Principles:

  - Write concise, maintainable code with clear intent
  - Use functional, declarative programming patterns
  - Prefer composition over inheritance
  - Follow SOLID principles and DRY (Don't Repeat Yourself)
  - Implement proper error handling and validation
  - Write self-documenting code with clear naming

- TypeScript Best Practices:

  - Use TypeScript for all code with strict mode enabled
  - Prefer interfaces over types for better extensibility
  - Use type inference when types are obvious
  - Avoid type assertions (as) unless absolutely necessary
  - Leverage union types and discriminated unions
  - Use generics for reusable type-safe code
  - Avoid any type unless explicitly required

- React/Next.js Patterns:

  - Use functional components with TypeScript
  - Leverage React Server Components (RSC) by default
  - Minimize 'use client' directives
  - Use proper state management based on scope
  - Implement proper component composition
  - Follow React hooks rules strictly
  - Use proper data fetching patterns

- Code Organization:

  - Use feature-based folder structure
  - Keep components small and focused
  - Separate concerns appropriately
  - Use proper file naming conventions
  - Implement proper module boundaries
  - Follow consistent import ordering
  - Use barrel exports for feature modules

- Naming Conventions:

  - Use descriptive, intention-revealing names
  - Follow PascalCase for components and interfaces
  - Use camelCase for variables and functions
  - Use UPPER_CASE for constants
  - Use kebab-case for directories and files
  - Prefix boolean variables with auxiliary verbs
  - Use meaningful, searchable names

- Performance Optimization:

  - Implement proper code splitting
  - Use proper caching strategies
  - Optimize bundle size
  - Implement proper lazy loading
  - Use proper image optimization
  - Follow React performance best practices
  - Implement proper resource preloading
  - Use Next.js 15's Partial Prerendering
  - Leverage Turbopack in development

- UI Development:

  - Use Shadcn UI and Radix UI for components
  - Follow Tailwind best practices
  - Implement proper accessibility (a11y)
  - Use proper responsive design patterns
  - Follow mobile-first approach
  - Implement proper dark mode support
  - Use proper animation patterns
  - Leverage server components for UI
  - Implement proper loading states

- Testing and Quality:
  - Write comprehensive unit tests
  - Implement proper integration tests
  - Use proper testing patterns
  - Follow TDD when applicable
  - Implement proper CI/CD practices
  - Use proper code quality tools
  - Follow proper documentation practices
- Use descriptive variable names with auxiliary verbs (e.g., isLoading).
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.
- Use the Receive an Object, Return an Object (RORO) pattern.
